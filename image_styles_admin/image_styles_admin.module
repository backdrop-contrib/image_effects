<?php
/**
 * @file Hook and callback implementations that must be available at all times.
 */

/**
 * Implements hook_menu().
 */
function image_styles_admin_menu() {
  $items = array();
  $items['admin/config/media/image-styles/duplicate/%image_style'] = array(
    'title' => 'Duplicate style',
    'description' => 'Make a copy of an image style.',
    'page callback' => 'image_styles_admin_duplicate_page_callback',
    'page arguments' => array(5),
    'access arguments' => array('administer image styles'),
    'file' => 'image_styles_admin.inc',
  );
  $items['admin/config/media/image-styles/flush'] = array(
    'title' => 'Flush all styles',
    'description' => 'Flush all image styles.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('image_styles_admin_flush_form'),
    'access arguments' => array('administer image styles'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 3,
  );
  $items['admin/config/media/image-styles/flush/%image_style'] = array(
    'title' => 'Flush style',
    'description' => 'Flush an image style.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('image_styles_admin_flush_form', 5),
    'access arguments' => array('administer image styles'),
  );
  return $items;
}

/**
 * Implements hook_preprocess_HOOK for theme image_style_list.
 */
function image_styles_admin_preprocess_image_style_list(&$variables) {
  // Sort the image styles by name.
  uasort($variables['styles'], function ($a, $b) {
    return strcasecmp($a['label'], $b['label']);
  });

  // Tell image_effects_preprocess_table to preprocess the next call to
  // theme_table().
  $image_styles = array_values($variables['styles']);

  image_styles_admin_preprocess_table($image_styles);

  // Add JS files.
  if (base_path() !== '/') {
    $base_path = base_path();
    backdrop_add_css("
        #image-styles .expand.inner { background-image: url($base_path/misc/menu-collapsed.png) }
        #image-styles .expanded.expand.inner { background-image: url($base_path/misc/menu-expanded.png) }",
      array('type' => 'inline'));
  }
  backdrop_add_js(backdrop_get_path('module', 'image_styles_admin') . '/js/image_styles_admin.js');

}

/**
 * Implements hook_preprocess_HOOK for theme table.
 */
function image_styles_admin_preprocess_table(&$variables) {
  static $image_styles = NULL;

  // If called from image_styles_admin_preprocess_image_style_list(), the
  // parameter will be a sequential array.
  if (key($variables) === 0) {
    $image_styles = $variables;
  }
  else if (!empty($image_styles)) {
    // Normal preprocess hook call: we only process if theme('table', ...) has
    // been called via theme_image_style_list() and we have a non empty list of
    // styles;

    // Set an ID on the table so it can be targeted by our CSS.
    $variables['attributes']['id'] = 'image-styles';

    // Add a summary of all effects to each row.
    foreach ($variables['rows'] as $i => &$row) {
      $style = $image_styles[$i];
      $effects_list = array();
      foreach ($style['effects'] as $key => $effect) {
        $definition = image_effect_definition_load($effect['name']);
        $effect = array_merge($definition, $effect);
        $style['effects'][$key] = $effect;
        $effect_details = isset($effect['summary theme']) ? theme($effect['summary theme'], array('data' => $effect['data'])) : '';
        $effects_list[] = '<span class="details">' . $effect['label'] . ' ' . $effect_details . '</span>';
      }
      // Add the effects summary description to the row.
      $effects_summary = '<div class="description" role="button">' . implode('<span class="separator">, </span>', $effects_list) . '</div>';
      $row[0] .= $effects_summary;
    }

    // Add the duplicate and flush links to the Operations dropbutton.
    foreach ($variables['rows'] as &$row) {
      foreach ($row as $colnum => $column) {
        if (!empty($column['data']['#type']) && $column['data']['#type'] == 'operations') {
          $row[$colnum]['data']['#links']['duplicate'] = array(
            'title' => 'Duplicate',
            'href' => str_replace('configure', 'duplicate', $row[$colnum]['data']['#links']['configure']['href']),
          );
          $row[$colnum]['data']['#links']['flush'] = array(
            'title' => 'Flush',
            'href' => str_replace('configure', 'flush', $row[$colnum]['data']['#links']['configure']['href']),
          );
        }
      }
    }

    // Don't preprocess subsequent calls to theme_table().
    $image_styles = NULL;
  }
}

/**
 * Form constructor for the confirm form.
 *
 * @param $style
 *   Associative array can contain a style name. Optional.
 *
 * @see image_styles_admin_flush_form_submit()
 * @ingroup forms
 */
function image_styles_admin_flush_form($form, &$form_state, $style = NULL) {
  $message = t('Note: this will only flush the images. It will not rebuild them.');
  $path = 'admin/config/media/image-styles';
  if (isset($style)) {
    $form = array(
      'style_name' => array(
        '#type' => 'value',
        '#value' => $style['name'],
      ),
    );
    $question = t('Are you sure you want to flush the %style image style?', array('%style' => $style['label']));
  }
  else {
    $form = NULL;
    $question = t('Are you sure you want to flush all image styles?');
  }
  backdrop_set_message($message, 'info');
  $output = confirm_form($form, $question, $path, NULL, t('Flush'), t('Cancel'));

  return $output;
}

/**
 * Form submission handler for image_styles_admin_flush_form().
 *
 * @see image_styles_admin_flush_form()
 */
function image_styles_admin_flush_form_submit($form, &$form_state) {
  if (isset($form_state['values']['style_name'])) {
    $style = image_style_load($form_state['values']['style_name']);
    $operations[] = array('image_style_flush', array($style));
  }
  else {
    foreach (image_styles() as $style) {
      $operations[] = array('image_style_flush', array($style));
    }
  }

  // Redirect to the destination URL.
  $destination = backdrop_get_destination();
  if ($destination['destination'] != current_path()) {
    $operations[] = array('image_styles_admin_batch_destination_redirect', $destination);
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'image_styles_admin_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch operation. Redirect the batch operation if it was called from the
 * admin_menu item.
 */
function image_styles_admin_batch_destination_redirect($destination, &$context) {
  // Set the destination redirect.
  $context['results']['redirect'] = $destination;
}

/**
 * Batch message.
 */
function image_styles_admin_batch_finished($success, $results, $operations) {
  if ($success) {
    backdrop_set_message(t('Image styles were successfully flushed.'));
  }
  else {
    backdrop_set_message(t('An error occurred while flushing the image caches.'), 'error');
  }

  if (!empty($results['redirect'])) {
    backdrop_goto($results['redirect']);
  }
  else {
    // Send the user to the right place depending on their access.
    if (user_access('administer image styles')) {
      backdrop_goto('admin/config/media/image-styles');
    }
    else {
      backdrop_goto();
    }
  }
}
